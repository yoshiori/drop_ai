name: Auto Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    permissions:
      contents: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.version.outputs.should_release }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          # Manual trigger from workflow_dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "Manual trigger: $VERSION_TYPE"
          # Determine version type from commit message (simplified)
          elif echo "$COMMIT_MSG" | grep -iqE "(major|breaking)"; then
            VERSION_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -iqE "(feat|feature|minor)"; then
            VERSION_TYPE="minor"
          else
            # Default to patch for any other changes
            VERSION_TYPE="patch"
          fi

          echo "Version type: $VERSION_TYPE"

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version
          npm version $VERSION_TYPE --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT

      - name: Commit version bump
        if: steps.version.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.version }} [skip ci]"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin HEAD --tags

  build:
    needs: version-and-release
    if: needs.version-and-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-and-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and package
        run: |
          npm run build
          if [ "${{ matrix.platform }}" = "linux" ]; then
            npm run dist:linux-portable
          else
            npm run dist
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: release/
          retention-days: 7

  release:
    needs: [version-and-release, build]
    if: needs.version-and-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-and-release.outputs.version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-packages

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-and-release.outputs.version }}
          name: DropAI v${{ needs.version-and-release.outputs.version }}
          files: |
            dist-packages/**/*.AppImage
            dist-packages/**/*.deb
            dist-packages/**/*.exe
            dist-packages/**/*.dmg
            dist-packages/**/*.zip
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
